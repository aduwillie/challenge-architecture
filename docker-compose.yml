version: '3'

networks:
  monitor-net:
    driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}

services:
  ### AWS services emulator
  aws:
    image: localstack/localstack
    environment:
      - SERVICES=s3:5000,sqs:5001
      - DEFAULT_REGION=us-east-1
      - HOSTNAME=aws
      - HOSTNAME_EXTERNAL=aws
      - PORT_WEB_UI=5002
    ports:
      - "5000:5000"
      - "5001:5001"
      - "5002:5002"
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s

  ### Document generator service
  stream:
    build: ./stream
    command: ts-node-dev src/index.ts
    env_file: docker-compose.env
    environment:
      AWS_ACCESS_KEY_ID: random
      AWS_SECRET_ACCESS_KEY: random
      AWS_REGION: us-east-1
    links:
      - nats
    expose: 
      - 5003
    volumes:
      - ./stream/src:/server/src
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s

  ### Microservice #1
  extract-text:
    build: ./services/extract-text
    command: ts-node-dev /server/src/index.ts
    env_file: docker-compose.env
    environment:
      AWS_ACCESS_KEY_ID: random
      AWS_SECRET_ACCESS_KEY: random
      AWS_REGION: us-east-1
    expose:
      - 5005
    links:
      - nats
    volumes: 
      - ./services/extract-text/src:/server/src
      - ./services/extract-text/package.json:/server/package.json
      - ./services/extract-text/tests:/server/tests
      - ./services/extract-text/test-deps:/server/test-deps
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
    
  ### Microservice #2
  extract-image:
    build: ./services/extract-image
    command: ts-node-dev /server/src/index.ts
    env_file: docker-compose.env
    environment:
      AWS_ACCESS_KEY_ID: random
      AWS_SECRET_ACCESS_KEY: random
      AWS_REGION: us-east-1
    links:
      - nats
    expose:
      - 5006
    volumes: 
      - ./services/extract-image/src:/server/src
      - ./services/extract-image/package.json:/server/package.json
      - ./services/extract-image/tests:/server/tests
      - ./services/extract-image/test-deps:/server/test-deps
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s

  ### Microservice #3
  worker:
    build: ./services/worker
    command: ts-node-dev /server/src/index.ts
    env_file: docker-compose.env
    environment:
      AWS_ACCESS_KEY_ID: random
      AWS_SECRET_ACCESS_KEY: random
      AWS_REGION: us-east-1
    links:
      - nats
    depends_on:
      - extract-text
      - extract-image
    expose:
      - 5007
    volumes: 
      - ./services/worker/src:/server/src
      - ./services/worker/package.json:/server/package.json
      # - ./services/extract-image/tests:/server/tests
      # - ./services/extract-image/test-deps:/server/test-deps
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s

  ### NATS Broker
  nats:
    image: nats
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
  
  ### Prometheus (Metrics database)
  prometheus:
    image: prom/prometheus:v2.3.2
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
  
  ### Alert Manager (Send notifications)
  alertmanager:
    image: prom/alertmanager:v0.15.1
    container_name: alertmanager
    volumes: 
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  ### Node Exporter (OS Metrics)
  nodeexporter:
    image: prom/node-exporter:v0.16.0
    container_name: nodeexporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  ### Container Advisor (Container Metrics)
  cadvisor:
    image: google/cadvisor:v0.28.3
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
  
  ### Grafana (Visualize metrics)
  grafana:
    image: grafana/grafana:5.2.2
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources:/etc/grafana/datasources
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/setup.sh:/setup.sh
    entrypoint: /setup.sh
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  ### Prometheus Pushgateway (Push acceptor for batch jobs)
  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"

  ### Caddy (Reverse Proxy and basic auth provider for prometheus and alertmanager)
  caddy:
    image: stefanprodan/caddy
    container_name: caddy
    ports:
      - "3000:3000"
      - "9090:9090"
      - "9093:9093"
      - "9091:9091"
      - "5005:5005"
      - "5006:5006"
    volumes:
      - ./caddy/:/etc/caddy/
    environment:
      - ADMIN_USER=admin
      - ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
